<?xml version="1.0"?>
<faqs>
    <super id="faq">FAQ</super>
    <super id="faq_validation">EJB Validation FAQ</super>
    <name>EJB Validation FAQ</name>

    <faq>
        <question>Misslocated class or NoClassDefFoundError</question>
        <answer id="misslocated.class">
            <p>
The short explanation is that the parent doesn't have all the classes it needs as some of them
are only in the child classloader, where the parent can't see them.
            </p>
            <p>
This would occur, for example, if a class was loaded by the parent classloader, but that
class' superclass wasn't visible to the parent classloader, perhaps because it is only in the
child classloader.
            </p>
            <p>
Here is a more concrete example:
<code>
  public interface Person extends EJBObject {
  }

  public interface Employee extends Person {
  }
</code>
            </p>
            <p>
Ok, so when we build our ejb jar, we put both the Person and Employee interfaces in the jar, so
everything should be good (so we think).  But now let's say that for some reason the Employee interface is
also in another jar and that jar was loaded into the system classpath.
            </p>
            <p>
When a new classloader is create for my ejb-jar at runtime and the system attempts to load the 
Employee interface, the call goes right through that classloader and down to the system classloader.  
The Employee interface is found, because it was accidentally added to that extra jar in the system
classpath.  So now the system classloader goes looking for Employee's superinterface, Person,
where it immediatly blows up and throws a NoClassDefFoundError: Person.
            </p>
            <p>
Most people will look at their ejb-jar and think, "But all my classes are there!?", which is
true.  It really doesn't matter though, because one of those classes is also in the parent
classloader.  The first call to load that class will bypass your classloader completely and
go to the parent.  Once there, it is the parent's job to find *all* the dependent classes.
If it can't ... NoClassDefFoundError.
            </p>
        </answer>
    </faq>
</faqs>

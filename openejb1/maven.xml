<?xml version="1.0" encoding="UTF-8"?>

<!-- $Revision$ $Date$ -->

<project default="default"
    xmlns:j="jelly:core"
    xmlns:u="jelly:util"
    xmlns:ant="jelly:ant"
    xmlns:maven="jelly:maven"
    xmlns:define="jelly:define"
    xmlns:aggregate="local:aggregate"
    xmlns:modules="local:modules">

    <j:set var="release.id" value="${pom.standardToLegacyId(pom.id)}-${pom.currentVersion}"/>

    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->

    <goal name="modules:reactor:init">
        <!--
           | Determine the includes which the reactor will use.
           |
           | Uses 4 properties to control which modules will be include:
           |
           | modules.types      Comma seperated list of module types (ie. specs or modules)
           | modules.includes   Comma seperated list of module names (ie. common, core, ...)
           | modules            Same as modules.includes, modules.includes initializes to this value
           | modules.excludes   Comma seperated list of module names to exclude
           |
           | The end result is that modules.reactor.includes is set to the project.xml files
           | to include.  This is the value the reactor will use.
           |
           | Example, to only build the common and core modules:
           |
           | maven -Dmodules=common,core
         -->

        <j:if test="${context.getVariable('module.types') == null}">
            <j:set var="module.types" value="modules,examples"/>
        </j:if>

        <j:if test="${context.getVariable('modules') == null}">
            <!-- The default is to build everything -->
            <j:set var="modules" value="*"/>
        </j:if>

        <j:if test="${context.getVariable('module.includes') == null}">
            <j:set var="module.includes" value="${modules}"/>
        </j:if>

        <j:if test="${context.getVariable('module.excludes') == null}">
            <j:set var="module.excludes" value=""/>
        </j:if>

        <u:tokenize var="types" delim=",">${module.types}</u:tokenize>

        <ant:fileScanner var="scanner">
            <ant:fileset dir="${basedir}">
                <j:forEach var="type" items="${types}">
                    <j:choose>
                        <j:when test="${context.getVariable('module.includes') == '*'}">
                            <ant:include name="${type}/*/project.xml"/>
                        </j:when>
                        <j:otherwise>
                            <u:tokenize var="includes" delim=",">${module.includes}</u:tokenize>
                            <j:forEach var="include" items="${includes}">
                                <u:available file="${basedir}/${type}/${include}/project.xml">
                                    <ant:include name="${type}/${include}/project.xml"/>
                                </u:available>
                            </j:forEach>
                        </j:otherwise>
                    </j:choose>

                    <j:choose>
                        <j:when test="${context.getVariable('module.excludes') == '*'}">
                            <ant:exclude name="${type}/*/project.xml"/>
                        </j:when>
                        <j:otherwise>
                            <u:tokenize var="excludes" delim=",">${module.excludes}</u:tokenize>
                            <j:forEach var="exclude" items="${excludes}">
                                <u:available file="${basedir}/${type}/${exclude}/project.xml">
                                    <ant:exclude name="${type}/${exclude}/project.xml"/>
                                </u:available>
                            </j:forEach>
                        </j:otherwise>
                    </j:choose>
                </j:forEach>
            </ant:fileset>
        </ant:fileScanner>

        <!-- Setup the includes which will be used by the reactor -->
        <j:forEach var="file" items="${scanner.iterator()}">
            <!--
               | Would be nice if reactor would take a file set, but for now just remove
               | the baseddir portion of the file's name.  So this will essentially strip off
               | ${basedir}
             -->
            <j:set var="filename"
                value="${file.parentFile.parentFile.name}/${file.parentFile.name}/${file.name}"/>
            <j:choose>
                <j:when test="${context.getVariable('modules.reactor.includes') == null}">
                    <j:set var="modules.reactor.includes" value="${filename}"/>
                </j:when>
                <j:otherwise>
                    <j:set var="modules.reactor.includes" value="${modules.reactor.includes},${filename}"/>
                </j:otherwise>
            </j:choose>
        </j:forEach>
    </goal>

    <!-- Helper tags for modules -->
    <define:taglib uri="local:modules">

        <define:tag name="reactor">
            <j:if test="${aggregate != null}">
                <j:set var="modules.aggregate.skip" value="true"/>
                <j:if test="${aggregate}">
                    <j:set var="modules.aggregate.skip" value="false"/>
                </j:if>
            </j:if>

            <attainGoal name="modules:reactor:init"/>

            <j:choose>
                <j:when test="${goals != null}">
                    <maven:reactor
                        basedir="${basedir}"
                        includes="${modules.reactor.includes}"
                        banner="Executing (${goals}):"
                        ignoreFailures="false"
                        goals="${goals}"
                        postProcessing="true"
                        />
                </j:when>
                <j:when test="${goals == null}">
                    <maven:reactor
                        basedir="${basedir}"
                        includes="${modules.reactor.includes}"
                        banner="Executing (${goals}):"
                        ignoreFailures="false"
                        postProcessing="true"
                        />
                </j:when>
            </j:choose>

            <!-- Set reactor projects in parent scope so goals have access to it -->
            <j:set var="reactorProjects" value="${reactorProjects}" scope="parent"/>

            <!-- Optionaly perform module aggregation -->
            <j:if test="${context.getVariable('modules.aggregate.skip') != 'true'}">
                <attainGoal name="modules:aggregate"/>
            </j:if>
        </define:tag>

    </define:taglib>

    <goal name="modules:reactor">
        <modules:reactor/>
    </goal>

    <goal name="modules:default">
        <modules:reactor goals="default"/>
    </goal>

    <goal name="modules:sources">
        <modules:reactor goals="sources"/>
    </goal>

    <goal name="modules:build">
        <modules:reactor goals="build"/>
    </goal>

    <goal name="modules:site">
        <modules:reactor goals="site" aggregate="false"/>
    </goal>

    <goal name="modules:javadoc">
        <modules:reactor goals="javadoc" aggregate="false"/>
    </goal>

    <goal name="modules:clover">
        <modules:reactor goals="clover" aggregate="false"/>
    </goal>

    <goal name="modules:clean">
        <modules:reactor goals="clean" aggregate="false"/>
    </goal>

    <goal name="modules:clobber">
        <modules:reactor goals="clobber" aggregate="false"/>
    </goal>

    <goal name="modules:jar:deploy">
        <modules:reactor goals="jar:deploy"/>
    </goal>

    <preGoal name="clean:clean">
        <!-- Do not clean modules if are clobbering them -->
        <j:if test="${clobbering != 'true'}">
            <attainGoal name="modules:clean"/>
        </j:if>
    </preGoal>

    <preGoal name="clobber">
        <j:set var="clobbering" value="true"/>
        <attainGoal name="modules:clobber"/>
    </preGoal>

    <goal name="jar:deploy">
        <attainGoal name="modules:jar:deploy"/>
    </goal>

    <goal name="default">
        <attainGoal name="modules:default"/>
    </goal>


    <!-- ========================= -->
    <!-- Module Output Aggregation -->
    <!-- ========================= -->

    <goal name="aggregate">
        <attainGoal name="modules:reactor"/>
        <attainGoal name="modules:aggregate"/>
    </goal>

    <!-- Helper tags for module aggregation -->
    <define:taglib uri="local:aggregate">

        <define:tag name="copy">
            <u:available file="${source}" xmlns="jelly:ant">
                <mkdir dir="${target}"/>
                <copy todir="${target}">
                    <fileset dir="${source}">
                        <include name="${include}"/>
                        <exclude name="${exclude}"/>
                    </fileset>
                </copy>
            </u:available>
        </define:tag>
        
        <define:tag name="mkdir">
            <mkdir dir="${dir}"/>
        </define:tag>

        <define:tag name="scripts">
            <aggregate:copy
                source="${module.root}/src/bin"
                target="${aggregate.dir}/bin"
                include="**/*"/>
            <aggregate:mkdir dir="${aggregate.dir}/logs"/>
        </define:tag>

        <define:tag name="config">
            <aggregate:copy
                source="${module.root}/src/conf"
                target="${aggregate.dir}/conf"
                include="**/*"/>
        </define:tag>

        <define:tag name="deploy">
            <aggregate:copy
                source="${module.root}/src/deploy"
                target="${aggregate.dir}/beans"
                include="**/*"/>
        </define:tag>

        <define:tag name="libraries">
            <aggregate:copy
                source="${module.root}/target"
                target="${aggregate.dir}/lib"
                include="*.jar"/>
        </define:tag>

        <define:tag name="warfiles">
            <aggregate:copy
                source="${module.root}/target"
                target="${aggregate.dir}/war"
                include="*.war"/>
        </define:tag>

        <define:tag name="sources">
            <aggregate:copy
                source="${module.root}/src/java"
                target="${aggregate.dir}/src"
                include="**/*.java"/>
        </define:tag>

        <define:tag name="default">
            <j:if test="${scripts == null || scripts == 'true'}">
                <aggregate:scripts/>
            </j:if>

            <j:if test="${config == null || config == 'true'}">
                <aggregate:config/>
            </j:if>

            <j:if test="${deploy == null || deploy == 'true'}">
                <aggregate:deploy/>
            </j:if>

            <j:if test="${libraries == null || libraries == 'true'}">
                <aggregate:libraries/>
            </j:if>

            <j:if test="${warfiles == null || warfiles == 'true'}">
                <aggregate:warfiles/>
            </j:if>
        </define:tag>

    </define:taglib>

    <goal name="modules:aggregate"
        description="Aggregates module target output.">

        <ant:echo>Aggregating modules...</ant:echo>

        <!-- Setup the target aggregation directory -->
        <j:set var="aggregate.dir" value="${basedir}/target/${release.id}"/>
        <ant:mkdir dir="${aggregate.dir}"/>

        <j:forEach var="module" items="${reactorProjects}">
            <ant:echo>Processing ${module.id}...</ant:echo>

            <!-- Get the modules root directory -->
            <j:set var="module.root" value="${module.file.parent}"/>

            <!-- Invoke the aggregation hook -->
            <j:set var="hook_name" value="modules:aggregate:${module.id}"/>
            <!-- If there is no goal defined then use the default -->
            <j:set var="werkzProject" value="${org.apache.commons.jelly.werkz.Project}"/>
            <j:if test="${werkzProject.getGoal(hook_name) == null}">
                <j:set var="hook_name" value="modules:aggregate:default"/>
            </j:if>
            <attainGoal name="${hook_name}"/>

            <!-- Process dependencies -->
            <j:forEach var="artifact" items="${module.artifacts}">
                <j:set var="dependency" value="${artifact.dependency}"/>
                <j:if test="${dependency.getProperty('runtime') == 'true'}">
                    <ant:echo>Processing dependency: ${dependency.id}</ant:echo>

                    <j:choose>
                        <j:when test="${dependency.getProperty('destinations') == null}">
                            <j:set var="destinations" value="lib"/>
                        </j:when>
                        <j:otherwise>
                            <j:set var="destinations" value="${dependency.getProperty('destinations')}"/>
                        </j:otherwise>
                    </j:choose>

                    <u:tokenize var="destinationSet" delim="," trim="true">${destinations}</u:tokenize>

                    <j:forEach var="destination" items="${destinationSet}" trim="true">
                        <j:set var="targetDir" value="${aggregate.dir}/${destination.trim()}"/>
                        <ant:mkdir dir="${targetDir}"/>
                        <ant:copy todir="${targetDir}" file="${artifact.path}"/>
                    </j:forEach>
                </j:if>
            </j:forEach>
        </j:forEach>


        <!-- Cleanse some stuff -->
        <u:available file="${aggregate.dir}/bin" xmlns="jelly:ant">
            <!-- Fix permissions -->
            <chmod perm="ugo+x">
                <fileset dir="${aggregate.dir}/bin">
                    <include name="*"/>
                    <exclude name="*.bat"/>
                    <exclude name="*.cmd"/>
                </fileset>
            </chmod>
            <chmod perm="ugo-x">
                <fileset dir="${aggregate.dir}/bin">
                    <include name="*.bat"/>
                    <include name="*.cmd"/>
                </fileset>
            </chmod>

            <!-- Fix CRLF -->
            <fixcrlf srcdir="${aggregate.dir}/bin" eol="lf" eof="remove">
                <include name="*"/>
                <exclude name="*.bat"/>
                <exclude name="*.cmd"/>
            </fixcrlf>
            <fixcrlf srcdir="${aggregate.dir}/bin" eol="crlf">
                <include name="*.bat"/>
                <include name="*.cmd"/>
            </fixcrlf>
            
    	<replace file="${aggregate.dir}/bin/openejb" 
    		             token="@REPLACED-BY-MAVEN-XML@"
    		             value="${pom.currentVersion}"/>
        	
	    <replace file="${aggregate.dir}/bin/openejb.bat" 
	             token="@REPLACED-BY-MAVEN-XML@"
	             value="${pom.currentVersion}"/>
        </u:available>
        <copy todir="${aggregate.dir}">
            <fileset dir=".">
                <include name="CREDITS.txt"/>
                <include name="LICENSE.txt"/>
                <include name="README.txt"/>
            </fileset>
        </copy>
        <copy todir="examples/moviefun">
            <fileset dir="examples/moviefun/target">
                <include name="*.war"/>
            </fileset>
        </copy>

        <delete dir="examples/moviefun/target"/>

        <copy todir="${aggregate.dir}">
            <fileset dir="examples" />
        </copy>
    </goal>

    <goal name="openejb:release"
        description="Cuts release">
        <attainGoal name="clean"/>
        <attainGoal name="default"/>
        <!-- aggregate:sources/ -->
        <javadoc packagenames="org.openejb.*"
            defaultexcludes="yes"
            destdir="${aggregate.dir}/docs/api"
            author="true"
            version="true"
            Use="false"
            Splitindex="yes"
            windowtitle="OpenEJB API Documentation"
            doctitle="OpenEJB API Documentation"
            bottom="Copyright &#169; 2005 The OpenEJB Group. All Rights Reserved.">
            <sourcepath>
                <pathelement location="modules/core/src/java/"/>
                <pathelement location="modules/webadmin/src/java/"/>
            </sourcepath>
            <classpath>
                <path>
                    <fileset dir="${aggregate.dir}/lib">
                        <include name="*.jar"/>
                    </fileset>
                </path>
            </classpath>
        </javadoc>

        <attainGoal name="build-website"/>
    </goal>

    <goal name="build-website"
        description="Builds documentation">
        <cvspass cvsroot=":pserver:anon@cvs.openejb.org:/home/projects/openejb/scm" password=""/>
        <ant:cvs command="checkout"
          quiet="true"
          compression="true"
          cvsRoot=":pserver:anon@cvs.openejb.org:/home/projects/openejb/scm"
          dest="target"
          package="website"
          failonerror="true"
          />
      <!-- make generating website docs possible -->
       ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
      <ant:ant dir="target/website"/>
      <copy todir="${aggregate.dir}\docs">
        <fileset dir="target/website/docs/html"/>
      </copy>
    </goal>

    <!-- =============================== -->
    <!-- Module Output Aggregation Hooks -->
    <!-- =============================== -->

    <goal name="modules:aggregate:default">
        <aggregate:default/>
    </goal>

    <goal name="modules:aggregate:openejb:openejb-itests">
        <aggregate:default libraries="false"/>
        <aggregate:copy
            source="${module.root}/target"
            target="${aggregate.dir}/lib"
            include="*client.jar"
            exclude="openejb-itests-beans.jar"/>

        <aggregate:copy
            source="${module.root}/target"
            target="${aggregate.dir}/beans"
            include="openejb-itests-beans.jar"/>
    </goal>

    <goal name="modules:aggregate:openejb:openejb-webadmin">
        <aggregate:default libraries="false"/>
        <aggregate:copy
            source="${module.root}/target"
            target="${aggregate.dir}/beans"
            include="*.jar"
            exclude="openejb-webadmin-${pom.currentVersion}.jar"/>
    </goal>
    
    <!-- =============================== -->
    <!-- Documentation & Site Generation -->
    <!-- =============================== -->

    <goal name="javadoc">
        <attainGoal name="modules:javadoc"/>
    </goal>

    <preGoal name="xdoc:jelly-transform">
        <attainGoal name="html2xdoc"/>
        <attainGoal name="faq"/>
    </preGoal>

    <!-- Turn off reports for the top-level project -->
    <postGoal name="xdoc:register-reports">
        <attainGoal name="maven-license-plugin:deregister"/>
        <attainGoal name="maven-checkstyle-plugin:deregister"/>
        <attainGoal name="maven-pmd-plugin:deregister"/>
        <attainGoal name="maven-simian-plugin:deregister"/>
        <attainGoal name="maven-jdepend-plugin:deregister"/>
        <attainGoal name="maven-statcvs-plugin:deregister"/>
        <attainGoal name="maven-jxr-plugin:deregister"/>
        <attainGoal name="maven-javadoc-plugin:deregister"/>
        <attainGoal name="maven-junit-report-plugin:deregister"/>
        <attainGoal name="maven-clover-plugin:deregister"/>

        <!-- Run some useful top-level reports -->
        <!--<attainGoal name="maven-changelog-plugin:deregister"/>-->
        <!--<attainGoal name="maven-file-activity-plugin:deregister"/>-->
        <!--<attainGoal name="maven-developer-activity-plugin:deregister"/>-->
    </postGoal>

    <goal name="tomcat55">
      <j:set var="tomcat.branch" value="5"/>
      <j:set var="tomcat.version" value="5.5.15"/>
      <j:set var="tomcat.prefix" value="apache"/>
      <attainGoal name="tomcat.env"/>
    </goal>

    <goal name="tomcat50">
      <j:set var="tomcat.branch" value="5"/>
      <j:set var="tomcat.version" value="5.0.30"/>
      <j:set var="tomcat.prefix" value="jakarta"/>
      <attainGoal name="tomcat.env"/>
    </goal>

    <goal name="tomcat4">
      <j:set var="tomcat.branch" value="4"/>
      <j:set var="tomcat.version" value="4.1.31"/>
      <j:set var="tomcat.prefix" value="jakarta"/>
      <attainGoal name="tomcat.env"/>
    </goal>

    <goal name="setup:tomcat">
      <j:set var="targetDir" value="${basedir}/target/"/>

      <j:set var="tomcat.download" value="http://www.ibiblio.org/pub/mirrors/apache/tomcat/tomcat-${tomcat.branch}/v${tomcat.version}/bin/${tomcat.prefix}-tomcat-${tomcat.version}.zip"/>

      <j:set var="tomcat.src" value="${maven.repo.local}/tomcat/distributions/${tomcat.prefix}-tomcat-${tomcat.version}.zip"/>
      <j:set var="tomcat.dist" value="${maven.repo.local}/tomcat/distributions/${tomcat.prefix}-tomcat-${tomcat.version}.zip"/>
      <j:set var="tomcat.home" value="${targetDir}/${tomcat.prefix}-tomcat-${tomcat.version}"/>
      <j:set var="openejb.home" value="${targetDir}/openejb-${pom.currentVersion}" />

      <!-- Download tomcat if it isn't in the repo -->
      <u:file var="fileAsFile" name="${tomcat.dist}"/>
      <j:if test="${!(fileAsFile.exists())}">
	<mkdir dir="${maven.repo.local}/tomcat/distributions"/>
	<get src="${tomcat.download}" dest="${tomcat.dist}"/>
      </j:if>      

      <!-- Unzip if not unzipped -->
      <u:file var="fileAsFile" name="${tomcat.home}"/>
      <j:if test="${!(fileAsFile.exists())}">
	<unjar src="${tomcat.dist}" dest="${targetDir}"/>
	<chmod dir="${tomcat.home}/bin" perm="u+x" includes="**/*.sh"/>
      </j:if>      
    </goal>

    <goal name="setup:tomcat-src">
      <j:set var="targetDir" value="${basedir}/src/"/>

      <j:set var="tomcat.download" value="http://www.ibiblio.org/pub/mirrors/apache/tomcat/tomcat-${tomcat.branch}/v${tomcat.version}/src/${tomcat.prefix}-tomcat-${tomcat.version}-src.zip"/>
      <j:set var="tomcat.dist" value="${maven.repo.local}/tomcat/distributions/${tomcat.prefix}-tomcat-${tomcat.version}-src.zip"/>

      <!-- Download tomcat if it isn't in the repo -->
      <u:file var="fileAsFile" name="${tomcat.dist}"/>
      <j:if test="${!(fileAsFile.exists())}">
	<mkdir dir="${maven.repo.local}/tomcat/distributions"/>
	<get src="${tomcat.download}" dest="${tomcat.dist}"/>
      </j:if>      

      <unjar src="${tomcat.dist}" dest="${basedir}"/>

    </goal>


<!--
      <j:set var="catalina.dir" value="${tomcat.home}"/>
      <echo message="Starting tomcat servlet engine..."/>
      <java classname="org.apache.catalina.startup.Bootstrap" fork="yes">
	<jvmarg value="-Djava.endorsed.dirs=${catalina.dir}/common/endorsed"/>
	<jvmarg value="-Dcatalina.base=${catalina.dir}"/>
	<jvmarg value="-Dcatalina.home=${catalina.dir}"/>
	<jvmarg value="-Djava.io.tmpdir=${catalina.dir}/temp"/>
	<arg value="start"/>
	<classpath>
	  <pathelement location="${catalina.dir}/bin/bootstrap.jar"/>
	</classpath>
      </java>
-->      

    <goal name="start:tomcat">
      <exec executable="${tomcat.home}/bin/startup.sh">
	<env key="JAVA_OPTS" value="-Dopenejb.home=${openejb.home} -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/>
      </exec>
    </goal>

    <goal name="stop:tomcat">
      <exec executable="${tomcat.home}/bin/shutdown.sh" />
    </goal>

    <goal name="tomcat.env">
      <j:set var="targetDir" value="${basedir}/target/"/>
      <j:set var="tomcat.home" value="${targetDir}/${tomcat.prefix}-tomcat-${tomcat.version}"/>
      <j:set var="openejb.home" value="${targetDir}/openejb-${pom.currentVersion}" />
    </goal>

    <goal name="setup:loader-webapp">
      <!-- Unzip webapp and set openejb.home -->
      <mkdir dir="${tomcat.home}/webapps/openejb"/>
      <unjar src="${openejb.home}/war/openejb-loader-${pom.currentVersion}.war" dest="${tomcat.home}/webapps/openejb"/>
      <replace file="${tomcat.home}/webapps/openejb/WEB-INF/web.xml" token="@OPENEJB_HOME@" value="${openejb.home}"/>
    </goal>
    <goal name="setup:webapp-example">
      <j:set var="targetDir" value="${basedir}/target/"/>
      <j:set var="tomcat.home" value="${targetDir}/${tomcat.prefix}-tomcat-${tomcat.version}"/>
      <j:set var="openejb.home" value="${targetDir}/openejb-${pom.currentVersion}" />
      <!-- Unzip webapp and set openejb.home -->
      <mkdir dir="${tomcat.home}/webapps/openejb"/>
      <unjar src="${openejb.home}/war/openejb-webapp-examples-${pom.currentVersion}.war" dest="${tomcat.home}/webapps/movies"/>
      <replace file="${tomcat.home}/webapps/movies/WEB-INF/web.xml" token="@OPENEJB_HOME@" value="${openejb.home}"/>
    </goal>

</project>

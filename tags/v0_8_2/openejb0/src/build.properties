# -----------------------------------------------------------------------------
# build.properties
#
# This is an example "build.properties" file, used to customize building OpenEJB
# for your local environment.  Make any changes you need, and rename this file
# to "build.properties" in the same directory that contains the top level
# "build.xml" file.
#
# A note about the slash-backslash glitch:
# ----------------------------------------
#
# There is no need to use double blackslashes at all!
# This means you can even use forward slashes in java
# properties files etc. It has to work, believe me!
#
# Contributions by:
#
# Daniel S. Haischt <sirabyss@gmx.net>
#
# $Id$
# -----------------------------------------------------------------------------

# -----------------------------
# B A S I C   S E T T I N G S
# -----------------------------
name            = OpenEJB
version         = 0.8.2
project         = openejb
package         = org.openejb.${project}
build.dir       = ./build
src.dir         = ./src
conf.dir        = ./conf
javadoc.destdir = ./docs/apidocs
docs.src        = ${src.dir}/doc
docs.dest       = ./docs
openejb.jars    = ./lib
junit.fork      = false
year            = 2000,2001,2002
copyright       = OpenEJB Project
url             = http://openejb.sf.net
build.compiler  = modern
debug           = on
optimize        = off
deprecation     = off

# The path that is base for the rest of the paths in this file.
base.path=.

# CASTOR Databinding Framework:
# -----------------------------
#
# URL: http://castor.exolab.org
#
# The directory containing the Castor databinding framework.
castor.home=${base.path}
castor.jar=lib/castor-0.9.3.9.jar
castor.xml.jar=lib/castor-0.9.3.9-xml.jar

# SUN's Enterprise JavaBeans Technology (1.1):
# --------------------------------------------
#
# URL: http://java.sun.com/products/ejb/
#
# The jar containing class files for the ejb version 1.1
# final release.
ejb11.jar=${base.path}/lib/ejb-1.0.jar

# SUN's Enterprise JavaBeans Technology (2.0):
# --------------------------------------------
#
# URL: http://java.sun.com/products/ejb/
#
# The jar containing class files for the ejb version 2.0
# final release.
ejb20.jar=${base.path}/lib/ejb-2.0.jar

# SUN's JAVA Authentication And Authorization Service:
# ----------------------------------------------------
#
# URL: http://java.sun.com/products/jaas/
#
# The directory containing your binary distribution of JASS
# version 1.0.
jaas.home=${base.path}
jaas.jar=lib/jaas_1.0.jar

# SUN's J2EE Connector Architecture:
# ----------------------------------
#
# URL: http://java.sun.com/j2ee/connector/
#
# The jar file containing classes for the J2EE connector
# architecture version 1.0.
jca.jar=${base.path}/lib/jca_1.0.jar

# SUN's JDBC 2.0 Optional Package:
# --------------------------------
#
# URL: http://java.sun.com/products/jdbc/
#
# The jar file containing optional class files for
# the JDBC API version 2.0.
jdbcext.jar=${base.path}/lib/jdbc2_0-stdext.jar

# JDK 1.2 Proxy Classes:
# ----------------------
#
# URL: ???
#
# Proxy class files which are missing in SUN's jdk1.2.
jdk12proxy.jar=${base.path}/lib/jdk12-proxies.jar

# JAVA Enterprise Deployment Interface (aka JEDI):
# ------------------------------------------------
#
# URL: ???
#
# Base directory to the JEDI GUI.
jedi.home=${base.path}
jedi.jar=jedi-1_0.jar
jediplugin.jar=jedi-plugin-j2ee12.jar

# SUN's JAVA Message Service API:
# -------------------------------
#
# URL: http://java.sun.com/products/jms/
#
# The jar file containing classes for the JMS API version 1.0.2b
jms.jar=${base.path}/lib/jms_1.0.2a.jar

# SUN's JAVA Naming And Directory Interface:
# ------------------------------------------
#
# URL: http://java.sun.com/products/jndi/
#
# The jar file containing class files for SUN's JNDI API version 1.2.1.
jndi.jar=${base.path}/lib/jndi_1.2.1.jar

# SUN's JAVA Transaction API:
# ---------------------------
#
# URL: http://java.sun.com/products/jta/
#
# The jar file containing class files for SUN's JTA API version 1.0.1.
jta.jar=${base.path}/lib/jta_1.0.1.jar

# The Jakarta LOG4J Project:
# --------------------------
#
# URL: http://jakarta.apache.org/log4j/docs/index.html
#
# The jar file containing the Jakarta LOG4J distribution.
log4j.jar=${base.path}/lib/log4j-1.2.1.jar

# Minerva:
# --------
#
# URL: ???
#
# The jar file containing minerva specific class files.
minerva.jar=${base.path}/lib/minerva.jar

# The OpenORB Project:
# --------------------
#
# URL: http://openorb.exolab.org/
#
# The directory containing the OpenORB distribution.
openorb.home=${base.path}
openorb.jar=lib/openorb-1.2.1.jar
openorb.rmi.jar=lib/openorb_rmi-1.2.1.jar
openorb.tools.jar=lib/openorb_tools-1.2.1.jar

# SUN's JAVA Transaction Service:
# -------------------------------
#
# URL: http://java.sun.com/products/jts/
#
# The jar file containing class file for the OTS-JTS
# mapping version 1.0.
jts.jar=${base.path}/lib/ots-jts_1.0.jar

# The Tyrex Project:
# ------------------
#
# URL: http://tyrex.exolab.org/
#
# The directory containing the Tyrex distribution.
tyrex.home=${base.path}
tyrex.jar=lib/tyrex-0.9.8.jar
tyrex.iiop.jar=lib/tyrex-0.9.8-iiop.jar

# The JRefactory Beautyfier:
# --------------------------
#
# URL: http://jrefactory.sourceforge.net/
#
# The jar file for the JRefactory framework used to
# beautify the java source files.
jrefactory.jar=${base.path}/lib/jrefactory.jar

# JAVA API For XML Parsing:
# -------------------------
#
# URL: http://java.sun.com/xml/index.html
#
# The directory containing your binary distribution of JAXP and its
# associated declarations.  If you are using JAXP/1.0, replace
# "crimson.jar" with "parser.jar". If you are using Xerces, replace
# "crimson.jar" with "xerces.jar".
jaxp.home=${base.path}/lib
jaxp.parser.jar=xerces-J_1.4.0.jar
jaxp.xsltprocessor.jar=xalan.jar
jaxp.xalan1compat.jar=xalanj1compat.jar

# The XSL:P Processor:
# --------------------
#
# URL:
#
# The jar file containing the XSL:P processor classes.
xslp.jar=${base.path}/lib/xslp_1.1.jar

# JAVA Naming And Directory Interface:
# ------------------------------------
#
# URL: http://java.sun.com/products/jndi/
#
# The directory containing your binary distribution of the Java Naming and
# Directory Interface (JNDI), version 1.2.1 or later.
jndi.home=${base.path}

# JAVA Unit Test Framework:
# -------------------------
#
# URL: http://www.junit.org/
#
# The JAR file for the JUnit unit test suite you are using.  This is required
# only if you wish to execute the unit tests
junit.jar=${base.path}/lib/junit_3.5.jar

# Jakarta Regular Expresion package:
# ----------------------------------
#
# URL: http://jakarta.apache.org/regexp/
#
# The JAR file for the jakarta regular expression package, version 1.1.
jakarta.regexp.jar=${base.path}/lib/jakarta-regexp-1.1.jar

#
# JDBC 3 Fake
# This is a hack to make OpenEJB compile on JDK 1.4 AND JDK 1.3
# It contains the class javax.sql.Savepoint
JDBC3Fake.jar=${base.path}/lib/JDBC3Fake.jar

# This property should be uncommented if you are using JDK 1.3
# If it is not defined, classes that depend on 1.3 APIs will not
# be compiled.
using.jdk.1.3=true

# This property should be uncommented if you are using JDK 1.2
# If it is not defined, classes that depend on 1.2 APIs will not
# be compiled.
#using.jdk.1.2=true

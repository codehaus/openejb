<?xml version="1.0"?>
<!-- $Id$ -->
<document url="http://openejb.sf.net/cmp_entity_postgresql.xml" toc="numeric">
    <properties>
        <title>OpenEJB Configuration</title>
        <sub-title>The basic openejb.conf file layout</sub-title>
    </properties>
    <body>
<section title="Before starting" ref-id="before">
<p>
When OpenEJB starts up, the default configuration file is 
%OPENEJB_HOME%\conf\openejb.conf. However you are allowed to 
specify any file which matches this basic XML layout.  
</p>
<p>
<b>Feature:</b> If you accidentally edit your openejb.conf file 
beyond repair, no problem.  Just delete or rename the file (openejb.conf.bak 
perhaps) and a new openejb.conf will automatically be created for you containing
all the defaults.
</p>
</section>

<section title="Basic Layout" ref-id="layout">
<p>Here is a sample openejb.conf file similar to the 
one that OpenEJB will create by default.
</p>
<file name="openejb.conf"><![CDATA[
<?xml version="1.0"?>

<openejb>

<Container id="Default CMP Container" ctype="CMP_ENTITY">
    PoolSize            100
    Global_TX_Database  conf/default.cmp_global_tx_database.xml
    Local_TX_Database   conf/default.cmp_local_tx_database.xml
</Container>


<Container id="Default BMP Container" ctype="BMP_ENTITY" />


<Container id="Default Stateful Container" ctype="STATEFUL">
    TimeOut         20
    PoolSize        100
    BulkPassivate   50
</Container>    

<Container id="Default Stateless Container" ctype="STATELESS">
    StrictPooling   true
</Container>

<Connector id="Default JDBC Database" />

<Deployments dir="beans/" />

</openejb>
]]></file>

<p>
<ul>
    <li><b>Container</b> - zero or many are allowed.
        <br/>
        <br/>
        The <b>ctype</b> attribute determines what type of container it is. 
        There are 4 different container types:
        <ul>
        <li>CMP_ENTITY</li>
        <li>BMP_ENTITY</li>
        <li>STATEFUL</li>
        <li>STATELESS</li>
        </ul>
        <p>
        You can have several contianers of the same type, each container can 
        have it's own configuration properties.  For example, perhaps you want one
        Stateful SessionBean container (STATEFUL) that times out sessions in 5 minutes, 
        and another one that times them out after a few hours.  Then at deploy time you pick 
        the container you want a particular stateful session bean to go in.
        </p>
        <p>
        The <b>id</b> attribute can be whatever you want.  This is the name that uniquely 
        identifies your container.  This name is also used at deploy time.  Beware, the 
        <b>openejb-jar.xml</b> files use this ID to locate the correct contianer to run 
        the bean in.  If you change it, make sure you don't still have any openejb-jar.xml 
        files referencing the old name.
        </p>
        <br/>
    </li>
    <li><b>Deployments</b> - zero or many are allowed.
        <br/>
        <br/>
        Specifies the locations of beans 
        to be deployed onto OpenEJB. The element may have only one of the two 
        attributes (they are mutually exclusive): 
        <br/>
        <ul>
        <li><b>jar</b> - points to one particular bean</li>
        <li><b>dir</b> - points to a directory that contains beans</li>
        </ul>
        <p>
        The locations may be relative or absolute paths, where the former is 
        constructed to be an absolute path with %OPENEJB_HOME% prepended. 
        </p>
        <p>
        When the <b>dir</b> attribute is used, OpenEJB will look into every .jar file in
        it and see if it contains an <b>openejb-jar.xml</b> file.  If the jar does 
        contain openejb-jar.xml file and an ejb-jar.xml file, OpenEJB will automatically 
        load all the beans from it at startup.
        </p>
        <br/>
    </li>
    <li><b>Connector</b> - zero or many are allowed.
        <br/>
        <br/>
        Specifies a new JDBC datasource which will use the 
        default OpenEJB JDBC Connector.  It is possible to plug in  any  J2EE 
        Connector Architecture compliant connector, however more steps are required. 
        <br/>
        <p>
        The <b>id</b> attribute can be anything you want.  But beware, the 
        <b>openejb-jar.xml</b> files use this ID to locate the correct datasource
        to give to your beans at run-time.  If you change it, make sure you don't 
        still have any openejb-jar.xml files referencing the old name.
        </p>
        <br/>
    </li>
</ul>
</p>
</section>
    </body>
</document>

<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- $Revision$ $Date$ -->

<project default="default"
    xmlns:j="jelly:core"
    xmlns:ant="jelly:ant"
    xmlns:deploy="geronimo:deploy"
    xmlns:maven="jelly:maven"
    xmlns:u="jelly:util"
    xmlns:define="jelly:define"
    >

    <preGoal name="xdoc:jelly-transform">
        <attainGoal name="html2xdoc"/>
    </preGoal>

    <goal name="default">
        <attainGoal name="itest"/>
    </goal>

    <goal name="itest"
        description="Run Application Integration Tests"
        prereqs="itest:itest"/>

    <goal name="itest:prepare-filesystem"
        description="Create the needed directory structure">
        <mkdir dir="${itest.dest}"/>
        <mkdir dir="${itest.reportsDirectory}"/>
    </goal>

    <goal name="itest:itest"
        description="Run Application Integration Tests"
        prereqs="test:compile,itest:prepare-filesystem">

        <j:if test="${itest.skip != 'true'}">

            <!-- call our setup code -->
            <attainGoal name="itest:setup"/>

            <taskdef
                name="junit"
                classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>

            <j:catch var="exception">
                <junit printSummary="${itest.printSummary}"
                    failureProperty="itest.failure"
                    fork="${itest.fork}">

                    <j:if test="${context.getVariable('itest.jvm') != null}">
                        <setProperty name="jvm" value="${itest.jvm}"/>
                    </j:if>
                    <j:if test="${!context.getVariable('itest.fork').toString().trim().equalsIgnoreCase('no')}">
                        <setProperty name="dir" value="${itest.dir}"/>
                    </j:if>
                    <sysproperty key="basedir" value="${basedir}"/>
                    <u:tokenize var="listOfProperties" delim=" ">${itest.sysproperties}</u:tokenize>
                    <j:forEach var="someProperty" items="${listOfProperties}">
                        <sysproperty key="${someProperty}" value="${context.getVariable(someProperty)}"/>
                    </j:forEach>
                    <u:tokenize var="listOfEnv" delim=" ">${itest.envvars}</u:tokenize>
                    <j:forEach var="someEnv" items="${listOfEnv}">
                        <env key="${someEnv}" value="${context.getVariable(someEnv)}"/>
                    </j:forEach>
                    <u:tokenize var="listOfJvmArgs" delim=" ">${itest.jvmargs}</u:tokenize>
                    <j:forEach var="somejvmarg" items="${listOfJvmArgs}">
                        <jvmarg value="${somejvmarg}"/>
                    </j:forEach>
                    <formatter type="xml"/>
                    <formatter type="${itest.format}" usefile="${itest.usefile}"/>
                    <classpath>
                        <pathelement location="${itest.dest}"/>
                        <pathelement location="${maven.build.dest}"/>
                        <path refid="maven.dependency.classpath"/>
                        <pathelement path="${plugin.getDependencyPath('junit')}"/>
                        <j:if test="${!context.getVariable('itest.fork').toString().trim().equalsIgnoreCase('no')}">
                            <pathelement path="${plugin.getDependencyPath('xml-apis')}"/>
                            <pathelement path="${plugin.getDependencyPath('xerces')}"/>
                        </j:if>
                    </classpath>
                    <batchtest todir="${itest.reportsDirectory}">
                        <fileset dir="${basedir}/src/test" includes="${itest.includes}" excludes="{itest.excludes}"/>
                    </batchtest>
                </junit>
            </j:catch>
            <j:if test="${exception != null}">
                ${exception.printStackTrace()}
            </j:if>

            <!-- call our teardown code -->
            <attainGoal name="itest:teardown"/>

            <j:if test="${exception != null or  itest.failure}">
                <j:if test="${context.getVariable('itest.failure.ignore') != 'true'}">
                    <fail message="There were test failures."/>
                </j:if>
            </j:if>

        </j:if>

</goal>

<goal name="itest:setup">
    <ant:delete dir="${maven.build.dir}/openejb"/>
    <deploy:unpackServer
        geronimoVersion="2.0-SNAPSHOT"
        geronimoName="openejb"
        targetDir="${maven.build.dir}/openejb"/>
    <deploy:startRemoteServer
        geronimoTarget="${maven.build.dir}/openejb"
        vmArgs="-Djava.rmi.server.RMIClassLoaderSpi=org.apache.geronimo.rmi.RMIClassLoaderSpiImpl"
        configs="org/apache/geronimo/DefaultDatabase"/>
    <deploy:waitForStarted
        uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
        username="system"
        password="manager"
        id="org/apache/geronimo/DefaultDatabase"/>
    <echo message="server has started"/>
    <deploy:distribute
        uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
        username="system"
        password="manager"
        home="${basedir}"
        module="${maven.repo.local}/openejb/ejbs/openejb-itests-ejb-${pom.currentVersion}.jar"
        />
    <echo message="distributed ejbs"/>
    <deploy:start
        uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
        username="system"
        password="manager"
        id="org/openejb/Itests"/>
    <!--        <j:set var="itest.failure.ignore" value="true"/>-->
</goal>

<goal name="itest:teardown">
    <deploy:stop
        uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
        username="system"
        password="manager"
        id="org/openejb/Itests"/>
    <deploy:undeploy
        uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
        username="system"
        password="manager"
        id="org/openejb/Itests"/>
    <echo message="undeployed ejbs"/>
    <deploy:stopRemoteServer
        uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
        username="system"
        password="manager"/>
    <echo message="server has stopped"/>
</goal>

</project>

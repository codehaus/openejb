<?xml version="1.0"?>
<document url="http://www.openejb.org/embedded.xml" toc="none">
  <properties>
    <title>OpenEJB and Geronimo</title>
    <sub-title>Running the test suite on Geronimo 1.0 M1</sub-title>
  </properties>
  <body>

<section title="Wanna really big example?" ref-id="example">
  <p>
  OpenEJB has a pretty slick integration test suite that it's been using over the years.  The test suite is 
  basically a plain Java client and about 19 large EJBs.  Ok, so maybe the client isn't so plain, its a spicy 
  JUnit test suite, but does interact with the server in a completely standards compliant way.
  </p>
  <p>
  We packaged the whole thing up so you can see what is required to deploy an EJB jar in the server and
  run a client against it.  If you are just curious as to what the ejb jar looks like, you can just 
  <a href="http://openejb.codehaus.org/2.0M1/example-app/openejb-itests-beans2/"> look at an unpacked version</a>.
  </p>
</section>
<section title="Before we start" ref-id="before">
  <p>
  We assume you have downloaded and installed Geronimo 1.0 M1.  If you haven't, you can grab that <a href="http://www.apache.org/dist/">here</a>.
  Installation for Geronimo is pretty simple, you just download a tar or zip and unpack it.
  </p>
  <p>
    We also assume you have <a href="http://ant.apache.org/">Ant</a> installed.  Ant isn't required to use 
    Geronimo, we just whipped up an ant <a href="http://openejb.codehaus.org/2.0M1/example-app/build.xml">build.xml</a> to use in this example so you don't have to use the command line deployer and muck 
    with classpaths.  To see if you have Ant setup well enough to run this example, just type this on a command line
  </p>
  <p>
    <command>C:\> ant -version</command>
  </p>
  <p>
    If you don't see something like "Apache Ant version 1.6.0 compiled on December 18 2003" printed out, then ant isn't installed correctly on your system and you should get that setup before continuing.
  </p>
  <p>
    Last thing you need is the example.  Grab a tar.gz or zip <a href="http://openejb.codehaus.org/2.0M1/">here</a>.   When you get that downloaded and unpacked, you just a have to crack open the build.xml file and set the "geronimo.home" property in the build.xml to the location in which you installed Geronimo 1.0-M1.  So something like "C:\mystuff\incubator-geronimo-1.0-M1".
  </p>
</section>
<section title="Deploying the EJBs with Ant" ref-id="deploy">
  <p>Ok, you got all the setup garbage out of the way.  Time for some action!
  </p>
  <p>Run the following command to deploy the EJBs and a JCA connector for database access.</p>
  <p>
  <command>C:\example-app> ant install</command>
  </p>
  <p>You should see the following output:</p>
<p>
<code>
Buildfile: build.xml

install:
     [echo] Installing the Axion Datasource
     [echo] Installing the OpenEJB Integration Test Suite
                                                                                                         
BUILD SUCCESSFUL
Total time: 22 seconds
</code>
  </p>
  <p>If everything went OK, then contratulations are in order.  You just deployed your first set of EJBs into Geronimo!  If you see something like <a href="http://openejb.codehaus.org/2.0M1/example-app-bad-setup.txt">this instead</a>, the geronimo.home property was not set correctly.  Double check the path you used in the build.xml during the "Before we start" section.</p>
</section>

<section title="Deploying the EJBs without Ant" ref-id="deploy.noant">
  <p>If your not particulary keen on using ant, you could do the same thing right from the command line using the following commands:</p>
  <p><command>C:\example-app> java -jar %geronimo_home%\bin\deployer.jar --install --module openejb-jca-2.0M1.rar</command></p>
  <p><command>C:\example-app> java -jar %geronimo_home%\bin\deployer.jar --install --module openejb-itests-beans2.jar</command></p>
  <p>The first command deployed the OpenEJB JCA-JDBC resource adapter with Axion as the default datasource.  The second command deployed the test EJBs.</p>
  <p>We are assuming you set up a  %geronimo_home% environment variable pointing to the directory where Geronimo lives.  If you don't know how to setup environment variables, you can just type the full path of the deployer.jar.  So maybe something like this:</p>
  <p><command>C:\example-app> java -jar C:\incubator-geronimo-1.0-M1\bin\deployer.jar ...</command></p>
</section>

<section title="Starting the server" ref-id="server">
  <p>Next, move to the directory where you installed Geronimo and type the following start command</p>
  <p><command>C:\example-app> cd C:\incubator-geronimo-1.0-M1</command></p>
  <p><command>C:\incubator-geronimo-1.0-M1> java -jar bin/server.jar org/openejb/itests</command></p>
  <p>You should see the following output:</p>
<p>
<code>
18:25:08,105 INFO  [Kernel] Starting boot
18:25:08,335 INFO  [MBeanServerFactory] Created MBeanServer with ID: b8f675:fc2e493566:-8000:dain.local:1
18:25:08,941 INFO  [Kernel] Booted
18:25:08,999 INFO  [ConfigurationManager] Loaded Configuration geronimo.config:name="org/apache/geronimo/System"
18:25:09,518 INFO  [Configuration] Started configuration org/apache/geronimo/System
18:25:09,600 INFO  [ReadOnlyRepository] Repository root is file:/C:/incubator-geronimo-1.0-M1/repository/
18:25:09,686 INFO  [ConfigurationManager] Loaded Configuration geronimo.config:name="org/openejb/itests"
18:25:09,719 INFO  [ConfigurationManager] Loaded Configuration geronimo.config:name="org/openejb/connector/axion"
18:25:09,753 INFO  [ConfigurationManager] Loaded Configuration geronimo.config:name="org/apache/geronimo/Server"
18:25:10,761 INFO  [LogSupport] Log instance is class org.apache.geronimo.kernel.log.GeronimoLog
18:25:11,581 INFO  [Configuration] Started configuration org/apache/geronimo/Server
18:25:11,597 INFO  [HttpServer] Starting Jetty/5.0.beta0
18:25:11,610 INFO  [HttpServer] Started org.mortbay.jetty.Server@a30589
18:25:11,776 INFO  [SocketListener] Started SocketListener on 0.0.0.0:8080
18:25:12,043 INFO  [TcpTransportServerChannel] Listening for connections at: tcp://localhost:61616
18:25:12,051 INFO  [ActiveMQBrokerImpl] ActiveMQ JMS Broker started
18:25:12,696 INFO  [Configuration] Started configuration org/openejb/connector/axion
18:25:18,166 INFO  [Configuration] Started configuration org/openejb/itests
</code></p>
</section>
<section title="Running the client" ref-id="client">
  <p>Once the server has fully started, open another command window and run the test suite 
     (from the same directory containing the build.xml file) using the following command:
  </p>
  <p><command>C:\example-app> ant test</command></p>
  <p>You should see the following output:</p>
<p><code>
Buildfile: build.xml

test:
     [java] .........................................
     [java] .........................................
     [java] .........................................
     [java] .........................................
     [java] .........................................
     [java] .........................................
     [java] .........................................
     [java] .........................................
     [java] .........................................
     [java] ....................................
     [java] Time: 151.55

     [java] OK (405 tests)


BUILD SUCCESSFUL
Total time: 2 minutes 34 seconds
</code>
</p>
</section>
<section title="Help! It didn't work!" ref-id="help">
  <p>If you are running windows, 8 of the tests will fail.  Those running Mac OS X should experience no problems.   There is a difference between the Sun windows Java VM and the Mac OS X Java VM such that we are experiencing classloading issues deserializing arrays of EJBObjects or EJBHomes sent from the client into the server.  Totally fine on a Mac, fails on Windows.  Don't know what the status is for Linux.</p>
  <p>Things are fine sending arrays of EJBObjects from the server to the client, as well as sending EJBObjects either direction inside other objects.  Just arrays of EJBObjects going into the server from the client.  Strange VM garbage.  Anyway, we are aware of the problem and are working our butts off to figure out what the heck is going on.</p>
  <p>It just goes to show you how hard it is to pass our test suite.  If this is a VM bug, it would be the second one we've found.  Did you know the Sun 1.3.0 VM can't serialize one of the eight Java primitives?  If you serialize a char, it tries to deserialize it as a java.lang.Char, which obviously doesn't exist.</p>
</section>
<section title="Getting support" ref-id="help">
<p>Any problems with this release can be reported to the Geronimo mailing list or Jira issue tracker.
  <ul>
    <li><a href="mailto:geronimo-dev-subscribe@incubator.apache.org">Subscribe</a> to the Geronimo mailing list or <a href="http://nagoya.apache.org/eyebrowse/SummarizeList?listId=140">view archive</a></li>
    <li>File a <a href="http://issues.apache.org/jira/secure/BrowseProject.jspa?id=10220">bug report</a> in Jira</li>
  </ul>
</p>
</section>
  </body>

</document>
